<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>给页面添加水印</title>
      <link href="/liumengjie2148.github.io/2020/12/23/%E7%BB%99%E9%A1%B5%E9%9D%A2%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0/"/>
      <url>/liumengjie2148.github.io/2020/12/23/%E7%BB%99%E9%A1%B5%E9%9D%A2%E6%B7%BB%E5%8A%A0%E6%B0%B4%E5%8D%B0/</url>
      
        <content type="html"><![CDATA[<p>给页面添加水印的两种方式：</p><h2 id="JS生成dom节点给页面添加水印"><a href="#JS生成dom节点给页面添加水印" class="headerlink" title="JS生成dom节点给页面添加水印"></a>JS生成dom节点给页面添加水印</h2><p>可以JS生成一个DIV，设置绝对定位来做，水印一般都是斜着的，所以顺便给他旋转一下，同时需要取消这个div的点击事件，否则会影响页面交互。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 生成水印节点</span></span><br><span class="line">watermark(settings = &#123;&#125;) &#123;</span><br><span class="line">  <span class="comment">// 默认设置</span></span><br><span class="line">  <span class="keyword">let</span> options = &#123;</span><br><span class="line">    text: <span class="string">'xxx机构出品'</span>,</span><br><span class="line">    width: <span class="number">140</span>, <span class="comment">// 水印宽度</span></span><br><span class="line">    height: <span class="number">78</span>, <span class="comment">// 水印高度</span></span><br><span class="line">    rows: <span class="number">200</span>, <span class="comment">// 水印行数</span></span><br><span class="line">    cols: <span class="number">4</span>, <span class="comment">// 水印列数</span></span><br><span class="line">    angle: <span class="number">10</span> <span class="comment">// 水印倾斜度数</span></span><br><span class="line">    x: <span class="number">0</span>, <span class="comment">// 水印起始位置x轴坐标</span></span><br><span class="line">    y: <span class="number">20</span>, <span class="comment">// 水印起始位置Y轴坐标</span></span><br><span class="line">    x_space: <span class="number">80</span>, <span class="comment">// 水印x轴间隔</span></span><br><span class="line">    y_space: <span class="number">80</span>, <span class="comment">// 水印y轴间隔</span></span><br><span class="line">    color: <span class="string">'#e0e0e0'</span>, <span class="comment">// 水印字体颜色</span></span><br><span class="line">    alpha: <span class="number">0.2</span>, <span class="comment">// 水印透明度</span></span><br><span class="line">    fontsize: <span class="string">'14px'</span>, <span class="comment">// 水印字体大小</span></span><br><span class="line">    font: <span class="string">'微软雅黑'</span>, <span class="comment">// 水印字体</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  options = &#123;</span><br><span class="line">    ...options,</span><br><span class="line">    ...settings</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> oTemp = <span class="built_in">document</span>.createDocumentFragment()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> printDom = <span class="built_in">document</span>.getElementById(<span class="string">'print-body'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取打印dom宽度</span></span><br><span class="line">  <span class="keyword">const</span> pageWidth = printDom.offsetWidth</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取打印dom宽度</span></span><br><span class="line">  <span class="keyword">const</span> pageHeight = printDom.offsetHeight</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果将水印列数设置为0，或水印列数设置过大，超过页面最大宽度，则重新计算水印列数和水印x轴间隔</span></span><br><span class="line">  <span class="keyword">const</span> pageWidthCols =</span><br><span class="line">    options.x +</span><br><span class="line">    options.width * options.cols +</span><br><span class="line">    options.x_space * (options.cols - <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    options.cols === <span class="number">0</span> ||</span><br><span class="line">    <span class="comment">// eslint-disable-next-line radix</span></span><br><span class="line">    <span class="built_in">parseInt</span>(pageWidthCols) &gt; pageWidth</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">const</span> watermarkCols =</span><br><span class="line">      (pageWidth -</span><br><span class="line">        options.x +</span><br><span class="line">        options.x_space) /</span><br><span class="line">      (options.width + options.x_space)</span><br><span class="line">    <span class="comment">// eslint-disable-next-line radix</span></span><br><span class="line">    options.cols = <span class="built_in">parseInt</span>(watermarkCols)</span><br><span class="line">    <span class="keyword">const</span> watermarkXspace =</span><br><span class="line">      (pageWidth -</span><br><span class="line">        options.x -</span><br><span class="line">        options.width * options.cols) /</span><br><span class="line">      (options.cols - <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// eslint-disable-next-line radix</span></span><br><span class="line">    options.x_space = <span class="built_in">parseInt</span>(watermarkXspace)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pageHeightCols =</span><br><span class="line">    options.y +</span><br><span class="line">    options.height * options.rows +</span><br><span class="line">    options.y_space * (options.rows - <span class="number">1</span>)</span><br><span class="line">  <span class="comment">// 如果将水印行数设置为0，或水印行数设置过大，超过页面最大长度，则重新计算水印行数和水印y轴间隔</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    options.rows === <span class="number">0</span> ||</span><br><span class="line">    <span class="comment">// eslint-disable-next-line radix</span></span><br><span class="line">    <span class="built_in">parseInt</span>(pageHeightCols) &gt; pageHeight</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">const</span> watermarkRows =</span><br><span class="line">      (options.y_space +</span><br><span class="line">        pageHeight -</span><br><span class="line">        options.y) /</span><br><span class="line">      (options.height + options.y_space)</span><br><span class="line">    <span class="comment">// eslint-disable-next-line radix</span></span><br><span class="line">    options.rows = <span class="built_in">parseInt</span>(watermarkRows)</span><br><span class="line">    <span class="keyword">const</span> watermarkYspace =</span><br><span class="line">      (pageHeight -</span><br><span class="line">        options.y -</span><br><span class="line">        options.height * options.rows) /</span><br><span class="line">      (options.rows - <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// eslint-disable-next-line radix</span></span><br><span class="line">    options.y_space = <span class="built_in">parseInt</span>(watermarkYspace)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> x</span><br><span class="line">  <span class="keyword">let</span> y</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; options.rows; i += <span class="number">1</span>) &#123;</span><br><span class="line">    y =</span><br><span class="line">      options.y +</span><br><span class="line">      (options.y_space +</span><br><span class="line">        options.height) *</span><br><span class="line">        i</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; options.cols; j += <span class="number">1</span>) &#123;</span><br><span class="line">      x =</span><br><span class="line">        options.x +</span><br><span class="line">        (options.width +</span><br><span class="line">          options.x_space) *</span><br><span class="line">          j</span><br><span class="line">      <span class="keyword">const</span> maskDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">      maskDiv.id = <span class="string">`maskDiv<span class="subst">$&#123;i&#125;</span><span class="subst">$&#123;j&#125;</span>`</span></span><br><span class="line">      maskDiv.className = <span class="string">'maskDiv'</span></span><br><span class="line">      maskDiv.innerText = options.text</span><br><span class="line">      <span class="comment">// 设置水印div倾斜显示</span></span><br><span class="line">      maskDiv.style.webkitTransform = <span class="string">`rotate(-<span class="subst">$&#123;options.angle&#125;</span>deg)`</span></span><br><span class="line">      maskDiv.style.MozTransform = <span class="string">`rotate(-<span class="subst">$&#123;options.angle&#125;</span>deg)`</span></span><br><span class="line">      maskDiv.style.msTransform = <span class="string">`rotate(-<span class="subst">$&#123;options.angle&#125;</span>deg)`</span></span><br><span class="line">      maskDiv.style.OTransform = <span class="string">`rotate(-<span class="subst">$&#123;options.angle&#125;</span>deg)`</span></span><br><span class="line">      maskDiv.style.transform = <span class="string">`rotate(-<span class="subst">$&#123;options.angle&#125;</span>deg)`</span></span><br><span class="line">      maskDiv.style.visibility = <span class="string">''</span></span><br><span class="line">      maskDiv.style.position = <span class="string">'absolute'</span></span><br><span class="line">      maskDiv.style.left = <span class="string">`<span class="subst">$&#123;x&#125;</span>px`</span></span><br><span class="line">      maskDiv.style.top = <span class="string">`<span class="subst">$&#123;y&#125;</span>px`</span></span><br><span class="line">      maskDiv.style.overflow = <span class="string">'hidden'</span></span><br><span class="line">      maskDiv.style.zIndex = <span class="string">'1'</span></span><br><span class="line">      <span class="comment">// 让水印不遮挡页面的点击事件</span></span><br><span class="line">      maskDiv.style.pointerEvents = <span class="string">'none'</span></span><br><span class="line">      maskDiv.style.opacity = options.alpha</span><br><span class="line">      maskDiv.style.fontSize = options.fontsize</span><br><span class="line">      maskDiv.style.fontFamily = options.font</span><br><span class="line">      maskDiv.style.color = options.color</span><br><span class="line">      maskDiv.style.textAlign = <span class="string">'center'</span></span><br><span class="line">      maskDiv.style.width = <span class="string">`<span class="subst">$&#123;options.width&#125;</span>px`</span></span><br><span class="line">      maskDiv.style.height = <span class="string">`<span class="subst">$&#123;options.height&#125;</span>px`</span></span><br><span class="line">      maskDiv.style.lineHeight = <span class="string">`<span class="subst">$&#123;options.height&#125;</span>px`</span></span><br><span class="line">      maskDiv.style.display = <span class="string">'block'</span></span><br><span class="line">      oTemp.appendChild(maskDiv)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  printDom.appendChild(oTemp)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次生成水印时先清空上次生成的水印<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.removeWaterMark()</span><br><span class="line"><span class="keyword">const</span> watermark = <span class="string">'xxx机构'</span></span><br><span class="line"><span class="keyword">this</span>.watermark(&#123; <span class="attr">text</span>: <span class="string">`<span class="subst">$&#123;watermark&#125;</span>出品`</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除水印节点</span></span><br><span class="line">removeWaterMark() &#123;</span><br><span class="line">  <span class="keyword">const</span> printDivDom = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.getElementsByClassName(<span class="string">'maskDiv'</span>))</span><br><span class="line">  <span class="keyword">const</span> printDom = <span class="built_in">document</span>.getElementById(<span class="string">'print-body'</span>)</span><br><span class="line">  printDivDom.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    printDom.removeChild(item)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>优点：打印时是有水印的<br>缺点：打印预览和打印出来的水印字体样式比页面上的水印文字明显，影响页面正文阅读</p><h2 id="基于canvas给页面添加水印"><a href="#基于canvas给页面添加水印" class="headerlink" title="基于canvas给页面添加水印"></a>基于canvas给页面添加水印</h2><p>canvas元素其实就是一个画布，我们可以很方便地绘制一些文字、线条、图形等，它也可以将一个img标签里渲染的图片画在画布上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">getWaterMarkImg(&#123;text, width, height, color, fontSize, alpha&#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> svgStr = <span class="string">`&lt;svg xmlns="http://www.w3.org/2000/svg" width="<span class="subst">$&#123;width&#125;</span>px" height="<span class="subst">$&#123;height&#125;</span>px"&gt;</span></span><br><span class="line"><span class="string">                &lt;text x="20%" y="50%" dy="12px"</span></span><br><span class="line"><span class="string">                    text-anchor="start"</span></span><br><span class="line"><span class="string">                    stroke="<span class="subst">$&#123;color&#125;</span>"</span></span><br><span class="line"><span class="string">                    stroke-opacity="<span class="subst">$&#123;alpha&#125;</span>"</span></span><br><span class="line"><span class="string">                    fill="none"</span></span><br><span class="line"><span class="string">                    transform="rotate(-15, 120 120)"</span></span><br><span class="line"><span class="string">                    font-weight="100"</span></span><br><span class="line"><span class="string">                    font-size="<span class="subst">$&#123;fontSize&#125;</span>"</span></span><br><span class="line"><span class="string">                    &gt;</span></span><br><span class="line"><span class="string">                    <span class="subst">$&#123;text&#125;</span></span></span><br><span class="line"><span class="string">                &lt;/text&gt;</span></span><br><span class="line"><span class="string">            &lt;/svg&gt;`</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`data:image/svg+xml;base64,<span class="subst">$&#123;<span class="built_in">window</span>.btoa(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(svgStr)))&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="keyword">this</span>.$refs.watermark</span><br><span class="line"><span class="keyword">const</span> text = <span class="string">'xxx机构出品'</span></span><br><span class="line"><span class="keyword">if</span> (el &amp;&amp; text) &#123;</span><br><span class="line">  <span class="keyword">const</span> img = <span class="keyword">this</span>.getWaterMarkImg(&#123;</span><br><span class="line">    text, </span><br><span class="line">    width: <span class="number">300</span>, </span><br><span class="line">    height: <span class="number">200</span>, </span><br><span class="line">    color: <span class="string">'#000000'</span>, </span><br><span class="line">    fontsize: <span class="number">14</span>, </span><br><span class="line">    alpha: <span class="number">0.1</span></span><br><span class="line">  &#125;)</span><br><span class="line">  el.style.background = <span class="string">`url('<span class="subst">$&#123;img&#125;</span>') repeat`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：打印时是没有水印的，只限于页面查看时有水印</p><p>若要打印有水印的页面，可以让后台提供有水印的pdf文件链接来打印</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>MacOS安装npm全局包遇到权限问题</title>
      <link href="/liumengjie2148.github.io/2018/08/27/MacOS%E5%AE%89%E8%A3%85npm%E5%85%A8%E5%B1%80%E5%8C%85%E9%81%87%E5%88%B0%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/"/>
      <url>/liumengjie2148.github.io/2018/08/27/MacOS%E5%AE%89%E8%A3%85npm%E5%85%A8%E5%B1%80%E5%8C%85%E9%81%87%E5%88%B0%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="MacOS安装npm全局包遇到权限问题"><a href="#MacOS安装npm全局包遇到权限问题" class="headerlink" title="MacOS安装npm全局包遇到权限问题"></a>MacOS安装npm全局包遇到权限问题</h2><p>在MacOS上全局安装某个npm包时，会遇到如下问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm WARN checkPermissions Missing write access to /usr/local/lib/node_modules</span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong></p><p>在安装命令前加上<code>sudo</code>,即执行命令 <code>sudo npm install -g npm包名</code>，<br>会提示输入密码，输入本机开机密码即可获取权限安装。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Echarts图表之formatter用法</title>
      <link href="/liumengjie2148.github.io/2018/08/24/Echarts%E4%B9%8Bformatter%E7%94%A8%E6%B3%95/"/>
      <url>/liumengjie2148.github.io/2018/08/24/Echarts%E4%B9%8Bformatter%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>formatter  内容格式器，把一些不够人性化的内容通过某种处理让其变得人性化，便于用户更好地理解内容，支持字符串模板和回调函数两种形式</p><h2 id="Echarts图表组件内的格式化常用的地方："><a href="#Echarts图表组件内的格式化常用的地方：" class="headerlink" title="Echarts图表组件内的格式化常用的地方："></a>Echarts图表组件内的格式化常用的地方：</h2><h3 id="1、-legend-formatter"><a href="#1、-legend-formatter" class="headerlink" title="1、 legend.formatter"></a>1、 legend.formatter</h3><p>用来格式化图例文本。</p><p><strong>示例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用字符串模板，模板变量为图例名称 &#123;name&#125;</span></span><br><span class="line">formatter: <span class="string">'Legend &#123;name&#125;'</span></span><br><span class="line"><span class="comment">// 使用回调函数</span></span><br><span class="line">formatter: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Legend '</span> + name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、-xAxis-axisLabel-formatter-yAxis-axisLabel-formatter"><a href="#2、-xAxis-axisLabel-formatter-yAxis-axisLabel-formatter" class="headerlink" title="2、 xAxis.axisLabel.formatter /  yAxis.axisLabel.formatter"></a>2、 xAxis.axisLabel.formatter /  yAxis.axisLabel.formatter</h3><p>刻度标签的内容格式器</p><p>示例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用字符串模板，模板变量为刻度默认标签 &#123;value&#125;</span></span><br><span class="line">formatter: <span class="string">'&#123;value&#125; kg'</span></span><br><span class="line"><span class="comment">// 使用函数模板，函数参数分别为刻度数值（类目），刻度的索引</span></span><br><span class="line">formatter: <span class="function"><span class="keyword">function</span> (<span class="params">value, index</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 格式化成月/日，只在第一个刻度显示年份</span></span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(value);</span><br><span class="line">    <span class="keyword">var</span> texts = [(date.getMonth() + <span class="number">1</span>), date.getDate()];</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">        texts.unshift(date.getYear());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> texts.join(<span class="string">'/'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、-tooltip-formatter"><a href="#3、-tooltip-formatter" class="headerlink" title="3、 tooltip.formatter"></a>3、 tooltip.formatter</h3><p>提示框浮层内容格式器</p><p> （1） <strong>字符串模板</strong></p><p>模板变量有 {a}, {b}，{c}，{d}，{e}，分别表示系列名，数据名，数据值等。 在 trigger 为 ‘axis’ 的时候，会有多个系列的数据，此时可以通过 {a0}, {a1}, {a2} 这种后面加索引的方式表示系列的索引。 不同图表类型下的 {a}，{b}，{c}，{d} 含义不一样。 其中变量{a}, {b}, {c}, {d}在不同图表类型下代表数据含义为：</p><p>折线（区域）图、柱状（条形）图、K线图 : {a}（系列名称），{b}（类目值），{c}（数值）, {d}（无）</p><p>散点图（气泡）图 : {a}（系列名称），{b}（数据名称），{c}（数值数组）, {d}（无）</p><p>地图 : {a}（系列名称），{b}（区域名称），{c}（合并数值）, {d}（无）</p><p>饼图、仪表盘、漏斗图: {a}（系列名称），{b}（数据项名称），{c}（数值）, {d}（百分比）</p><p>更多其它图表模板变量的含义可以见相应的图表的 label.formatter 配置项。</p><p><strong> 示例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formatter: <span class="string">'&#123;b0&#125;: &#123;c0&#125;&lt;br /&gt;&#123;b1&#125;: &#123;c1&#125;'</span></span><br></pre></td></tr></table></figure><p> (2) <strong>回调函数</strong></p><p>回调函数格式：</p><p><code>(params: Object|Array, ticket: string, callback: (ticket: string, html: string)) =&gt; string<br>第一个参数 params 是 formatter 需要的数据集。格式如下：</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    componentType: &apos;series&apos;,</span><br><span class="line">    // 系列类型</span><br><span class="line">    seriesType: string,</span><br><span class="line">    // 系列在传入的 option.series 中的 index</span><br><span class="line">    seriesIndex: number,</span><br><span class="line">    // 系列名称</span><br><span class="line">    seriesName: string,</span><br><span class="line">    // 数据名，类目名</span><br><span class="line">    name: string,</span><br><span class="line">    // 数据在传入的 data 数组中的 index</span><br><span class="line">    dataIndex: number,</span><br><span class="line">    // 传入的原始数据项</span><br><span class="line">    data: Object,</span><br><span class="line">    // 传入的数据值</span><br><span class="line">    value: number|Array,</span><br><span class="line">    // 数据图形的颜色</span><br><span class="line">    color: string,</span><br><span class="line">    // 饼图的百分比</span><br><span class="line">    percent: number,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 trigger 为 ‘axis’ 的时候，或者 tooltip 被 axisPointer 触发的时候，params 是多个系列的数据数组。其中每项内容格式同上，并且，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    componentType: &apos;series&apos;,</span><br><span class="line">    // 系列类型</span><br><span class="line">    seriesType: string,</span><br><span class="line">    // 系列在传入的 option.series 中的 index</span><br><span class="line">    seriesIndex: number,</span><br><span class="line">    // 系列名称</span><br><span class="line">    seriesName: string,</span><br><span class="line">    // 数据名，类目名</span><br><span class="line">    name: string,</span><br><span class="line">    // 数据在传入的 data 数组中的 index</span><br><span class="line">    dataIndex: number,</span><br><span class="line">    // 传入的原始数据项</span><br><span class="line">    data: Object,</span><br><span class="line">    // 传入的数据值</span><br><span class="line">    value: number|Array,</span><br><span class="line">    // 数据图形的颜色</span><br><span class="line">    color: string,</span><br><span class="line"></span><br><span class="line">&#125;,...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>注： ECharts 2.x 使用数组表示各参数的方式不再支持。</p><p>第二个参数 ticket 是异步回调标识，配合第三个参数 callback 使用。 第三个参数 callback 是异步回调，在提示框浮层内容是异步获取的时候，可以通过 callback 传入上述的 ticket 和 html 更新提示框浮层内容。</p><p><strong>示例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">formatter: <span class="function"><span class="keyword">function</span> (<span class="params">params, ticket, callback</span>) </span>&#123;</span><br><span class="line">    $.get(<span class="string">'detail?name='</span> + params.name, <span class="function"><span class="keyword">function</span> (<span class="params">content</span>) </span>&#123;</span><br><span class="line">        callback(ticket, toHTML(content));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Loading'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、-series-i-label-formatter"><a href="#4、-series-i-label-formatter" class="headerlink" title="4、 series[i]-*.label.formatter"></a>4、 series[i]-*.label.formatter</h3><p>标签内容格式器，字符串模板与回调函数返回的字符串均支持用 \n 换行。</p><p><strong>字符串模板</strong> 模板变量有：</p><ul><li>{a}：系列名。</li><li>{b}：数据名。</li><li>{c}：数据值。</li><li>{@xxx}：数据中名为’xxx’的维度的值，如{@product}表示名为’product’` 的维度的值。</li><li>{@[n]}：数据中维度n的值，如{@[3]}` 表示维度 3 的值，从 0 开始计数。</li></ul><p><strong>示例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formatter: <span class="string">'&#123;b&#125;: &#123;@score&#125;'</span></span><br></pre></td></tr></table></figure><p><strong>回调函数</strong> 格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(params: <span class="built_in">Object</span>|<span class="built_in">Array</span>) =&gt; string</span><br></pre></td></tr></table></figure><p>参数 params 是 formatter 需要的单个数据集。格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    componentType: &apos;series&apos;,</span><br><span class="line">    // 系列类型</span><br><span class="line">    seriesType: string,</span><br><span class="line">    // 系列在传入的 option.series 中的 index</span><br><span class="line">    seriesIndex: number,</span><br><span class="line">    // 系列名称</span><br><span class="line">    seriesName: string,</span><br><span class="line">    // 数据名，类目名</span><br><span class="line">    name: string,</span><br><span class="line">    // 数据在传入的 data 数组中的 index</span><br><span class="line">    dataIndex: number,</span><br><span class="line">    // 传入的原始数据项</span><br><span class="line">    data: Object,</span><br><span class="line">    // 传入的数据值</span><br><span class="line">    value: number|Array,</span><br><span class="line">    // 数据图形的颜色</span><br><span class="line">    color: string,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>npm 私有仓库 install 使用方法</title>
      <link href="/liumengjie2148.github.io/2018/07/14/npm%20%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%20install%20%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/liumengjie2148.github.io/2018/07/14/npm%20%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%20install%20%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm adduser --registry=http://registry.npm.aibeike.com:7001</span><br></pre></td></tr></table></figure><p><img src="http://xuhongbo.qiniudn.com/WX20180815-174640@2x.png" alt=""></p><h2 id="登录用户并指定-registry（源）和scope（作用域）"><a href="#登录用户并指定-registry（源）和scope（作用域）" class="headerlink" title="登录用户并指定 registry（源）和scope（作用域）"></a>登录用户并指定 registry（源）和scope（作用域）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm login --registry=http://registry.npm.aibeike.com:7001 --scope=@tal</span><br><span class="line">--registry # 私有仓库地址</span><br><span class="line">--scope    # 作用域，当带有配置的作用域时，会到我们的私服上拉取npm包</span><br></pre></td></tr></table></figure><p><em>npm包以后的命名会有作用域，规范 <code>@scope/packageName</code></em></p><p><img src="http://xuhongbo.qiniudn.com/WX20180815-175537@2x.png" alt=""></p><p><em>注意请不要把全局的 registry设置为<code>http://registry.npm.aibeike.com:7001</code></em></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>echarts使用笔记</title>
      <link href="/liumengjie2148.github.io/2018/07/13/echarts%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/liumengjie2148.github.io/2018/07/13/echarts%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、在webpack中使用ECharts"><a href="#一、在webpack中使用ECharts" class="headerlink" title="一、在webpack中使用ECharts"></a>一、在webpack中使用ECharts</h2><h3 id="npm-安装-ECharts"><a href="#npm-安装-ECharts" class="headerlink" title="npm 安装 ECharts"></a>npm 安装 ECharts</h3><p> 使用下面的命令通过npm安装ECharts<br>  <code>npm install echarts --save</code></p><h3 id="引入ECharts"><a href="#引入ECharts" class="headerlink" title="引入ECharts"></a>引入ECharts</h3><ol><li><p>可以直接在项目代码中 <code>require(&#39;echarts&#39;)</code>来整体引入ECharts。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> echarts = <span class="built_in">require</span>(<span class="string">'echarts'</span>);</span><br><span class="line"><span class="comment">// 基于准备好的dom，初始化echarts实例</span></span><br><span class="line"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制图表</span></span><br><span class="line">myChart.setOption(&#123;</span><br><span class="line">  tooltip: &#123; <span class="comment">// 提示框</span></span><br><span class="line">   trigger: <span class="string">'axis'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  legend: &#123;</span><br><span class="line">    top: <span class="number">90</span>,</span><br><span class="line">    right: <span class="number">8</span>,</span><br><span class="line">    itemWidth: <span class="number">16</span>,</span><br><span class="line">    itemHeight: <span class="number">12</span>,</span><br><span class="line">    orient: <span class="string">'vertical'</span>,</span><br><span class="line">    data: [<span class="string">'小学'</span>, <span class="string">'初中'</span>, <span class="string">'高中'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  toolbox: &#123; <span class="comment">// 工具箱</span></span><br><span class="line">    right: <span class="number">16</span>,</span><br><span class="line">    top: <span class="number">0</span>,</span><br><span class="line">    itemGap: <span class="number">16</span>, <span class="comment">// 工具栏 icon 每项之间的间隔。横向布局时为水平间隔，纵向布局时为纵向间隔。</span></span><br><span class="line">    feature: &#123; <span class="comment">// 各个工具配置项</span></span><br><span class="line">      myTool1: &#123;</span><br><span class="line">        show: <span class="literal">true</span>,</span><br><span class="line">        title: <span class="string">'导出表格'</span>,</span><br><span class="line">        icon: <span class="string">'image://../../../../static/images/Excel-download@2x.png'</span>,</span><br><span class="line">        onclick: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          downloadExl(<span class="keyword">this</span>.exportData, <span class="string">''</span>, <span class="keyword">this</span>.elementId)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      saveAsImage: &#123;</span><br><span class="line">        title: <span class="string">'导出图片'</span>,</span><br><span class="line">        type: <span class="string">'png'</span>,</span><br><span class="line">        excludeComponents: [ <span class="comment">// 保存图表时忽略的工具组件,默认忽略工具栏</span></span><br><span class="line">          <span class="string">'toolbox'</span></span><br><span class="line">        ],</span><br><span class="line">        icon: <span class="string">'image://../../../../static/images/Pic-download@2x.png'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  xAxis: &#123;</span><br><span class="line">    data: <span class="keyword">this</span>.subList,</span><br><span class="line">    axisLine: &#123;<span class="attr">show</span>: <span class="literal">false</span>&#125;, <span class="comment">// 是否显示坐标轴轴线。</span></span><br><span class="line">    nameTextStyle: &#123;<span class="attr">color</span>: <span class="string">'#212121'</span>&#125;,</span><br><span class="line">    axisTick: &#123;<span class="attr">show</span>: <span class="literal">false</span>&#125; <span class="comment">// 是否显示坐标轴刻度。</span></span><br><span class="line">  &#125;,</span><br><span class="line">  yAxis: &#123;</span><br><span class="line">    axisLine: &#123;<span class="attr">show</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">    axisTick: &#123;<span class="attr">show</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">    splitLine: &#123; <span class="comment">// 坐标轴在 grid 区域中的分隔线</span></span><br><span class="line">      lineStyle: &#123;<span class="attr">type</span>: <span class="string">'dashed'</span>&#125; <span class="comment">// 分隔线线的类型。</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  series: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'小学'</span>,</span><br><span class="line">      type: <span class="string">'bar'</span>,</span><br><span class="line">      barWidth: <span class="number">16</span>,</span><br><span class="line">      barGap: <span class="string">'80%'</span>,</span><br><span class="line">      data: <span class="keyword">this</span>.xiaoCnt,</span><br><span class="line">      label: &#123;</span><br><span class="line">        normal: &#123;</span><br><span class="line">          show: <span class="literal">true</span>,</span><br><span class="line">          position: <span class="string">'top'</span>,</span><br><span class="line">          rotate: <span class="number">45</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      itemStyle: &#123;</span><br><span class="line">        normal: &#123;</span><br><span class="line">          color: <span class="string">'#FFE066'</span>,</span><br><span class="line">          label: &#123;</span><br><span class="line">            show: <span class="literal">true</span>,</span><br><span class="line">            textStyle: &#123;</span><br><span class="line">              color: <span class="string">'#000'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'初中'</span>,</span><br><span class="line">      type: <span class="string">'bar'</span>,</span><br><span class="line">      barWidth: <span class="number">16</span>,</span><br><span class="line">      barGap: <span class="string">'80%'</span>,</span><br><span class="line">      data: <span class="keyword">this</span>.chuCnt,</span><br><span class="line">      label: &#123;</span><br><span class="line">        normal: &#123;</span><br><span class="line">          show: <span class="literal">true</span>,</span><br><span class="line">          position: <span class="string">'top'</span>,</span><br><span class="line">          rotate: <span class="number">45</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      itemStyle: &#123;</span><br><span class="line">        normal: &#123;</span><br><span class="line">          color: <span class="string">'#8CE99A'</span>,</span><br><span class="line">          label: &#123;</span><br><span class="line">            show: <span class="literal">true</span>,</span><br><span class="line">            textStyle: &#123;</span><br><span class="line">              color: <span class="string">'#000'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'高中'</span>,</span><br><span class="line">      type: <span class="string">'bar'</span>,</span><br><span class="line">      barWidth: <span class="number">16</span>,</span><br><span class="line">      barGap: <span class="string">'80%'</span>,</span><br><span class="line">      data: <span class="keyword">this</span>.gaoCnt,</span><br><span class="line">      label: &#123;</span><br><span class="line">        normal: &#123;</span><br><span class="line">          show: <span class="literal">true</span>,</span><br><span class="line">          position: <span class="string">'top'</span>,</span><br><span class="line">          rotate: <span class="number">45</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      itemStyle: &#123;</span><br><span class="line">        normal: &#123;</span><br><span class="line">          color: <span class="string">'#72C3FC'</span>,</span><br><span class="line">          label: &#123;</span><br><span class="line">            show: <span class="literal">true</span>,</span><br><span class="line">            textStyle: &#123;</span><br><span class="line">              color: <span class="string">'#000'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 控制边距</span></span><br><span class="line">  grid: &#123;</span><br><span class="line">    left: <span class="number">0</span>,</span><br><span class="line">    right: <span class="string">'8%'</span>,</span><br><span class="line">    top: <span class="number">30</span>,</span><br><span class="line">    bottom: <span class="number">0</span>,</span><br><span class="line">    containLabel: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>按需引入ECharts图表和组件</p><p>默认使用<code>require(&#39;echarts&#39;)</code>得到的是已经加载了所有图表和组件的ECharts包，在项目中，可以只按需引入需要的模块。</p><p>例如上面实例代码中只用到了柱状图、title、提示框、工具组件、图例组件，因此在引入的时候也只需要引入这些模块。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入ECharts 主模块</span></span><br><span class="line"><span class="keyword">var</span> echarts = <span class="built_in">require</span>(<span class="string">'echarts/lib/echarts'</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/lib/chart/bar'</span>) <span class="comment">// 引入柱状图</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/lib/component/tooltip'</span>) <span class="comment">// 信息提示框组件</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/lib/component/toolbox'</span>) <span class="comment">// 引入工具组件</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/lib/component/legend'</span>) <span class="comment">// 引入图例组件</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/lib/component/title'</span>) <span class="comment">// title组件</span></span><br></pre></td></tr></table></figure><p>可以按需引入的模块列表见 (<a href="https://github.com/ecomfe/echarts/blob/master/index.js" target="_blank" rel="noopener">https://github.com/ecomfe/echarts/blob/master/index.js</a>)</p><h2 id="二、图表的样式"><a href="#二、图表的样式" class="headerlink" title="二、图表的样式"></a>二、图表的样式</h2><p>Echarts 提供了丰富的自定义配置选项，并且能够从全局、系列、数据3个层级去设置数据图形的样式。</p><p>使用Echarts实现下面这个南丁格尔图：</p><p><img src="/liumengjie2148.github.io/2018/07/13/echarts使用笔记/images/1531462727629.jpg" width="500" title="南丁格尔图"></p><h3 id="绘制南丁格尔图"><a href="#绘制南丁格尔图" class="headerlink" title="绘制南丁格尔图"></a>绘制南丁格尔图</h3><p>这次要画的是饼图，饼图主要是通过扇形的弧度表现不同类目的数据在总和中的占比，它的数据格式比柱状图更简单，只有一维的数值，不需要给类目。因为不在直角坐标系上，所以也不需要<code>xAxis</code>, <code>yAxis</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">myChart.setOption(&#123;</span><br><span class="line">    series : [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'入库试题量'</span>,</span><br><span class="line">            type: <span class="string">'pie'</span>,</span><br><span class="line">            radius: [<span class="number">0</span>, <span class="string">'60%'</span>],</span><br><span class="line">            center: [<span class="string">'50%'</span>, <span class="string">'50%'</span>],</span><br><span class="line">            data:[</span><br><span class="line">                &#123;<span class="attr">value</span>: <span class="number">7307</span>, <span class="attr">name</span>: <span class="string">'录排订单'</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">value</span>: <span class="number">948</span>, <span class="attr">name</span>: <span class="string">'改编订单'</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">value</span>: <span class="number">4064</span>, <span class="attr">name</span>: <span class="string">'Word订单'</span>&#125;,</span><br><span class="line">                &#123;<span class="attr">value</span>: <span class="number">2711</span>, <span class="attr">name</span>: <span class="string">'直接录入'</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面的代码就能画出一个简单的饼图：</p><p><img src="/liumengjie2148.github.io/2018/07/13/echarts使用笔记/images/1531463962589.jpg" width="300" title="饼图"></p><p>这里的data属性不像介绍ECharts引入方式时柱状图里那样每一项都是单个数值，而是一个包含 <code>name</code> 和 <code>value</code>属性的对象，ECharts中的数据项都是既可以只设成数值，也可以设成一个包含有名称、该数据图形的样式配置、标签配置的对象。具体见[data文档] (<a href="http://echarts.baidu.com/option.html#series-pie.data" target="_blank" rel="noopener">http://echarts.baidu.com/option.html#series-pie.data</a>)</p><p>ECharts 中的饼图通过设置 <code>roseType</code> 就可以显示成南丁格尔图。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roseType: &apos;angle&apos;</span><br></pre></td></tr></table></figure><p>南丁格尔图会通过半径表示数据的大小。</p><h3 id="阴影的配置"><a href="#阴影的配置" class="headerlink" title="阴影的配置"></a>阴影的配置</h3><p>ECharts 中有一些通用的样式，诸如阴影、透明度、颜色、边框颜色、边框宽度等，这些样式一般都会在系列的 <code>itemStyle</code> 里设置。例如阴影的样式可以通过下面几个配置项设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">itemStyle: &#123;</span><br><span class="line">    shadowBlur: <span class="number">200</span>,<span class="comment">// 阴影的大小</span></span><br><span class="line">    shadowOffsetX: <span class="number">0</span>,<span class="comment">// 阴影水平方向上的偏移</span></span><br><span class="line">    shadowOffsetY: <span class="number">0</span>,<span class="comment">// 阴影垂直方向上的偏移</span></span><br><span class="line">    shadowColor: <span class="string">'rgba(0, 0, 0, 0.5)'</span> <span class="comment">// 阴影颜色</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/liumengjie2148.github.io/2018/07/13/echarts使用笔记/images/13_42_47__08_24_2018.jpg" width="300" title="南丁格尔图"></p><p><code>itemStyle</code>的<code>emphasis</code>是鼠标<code>hover</code>时候的高亮样式。上面的示例里是正常的样式下加阴影，但是可能更多的时候是hover的时候通过阴影突出。<br>就需要如下的设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">itemStyle: &#123;</span><br><span class="line">    emphasis: &#123;</span><br><span class="line">        shadowBlur: <span class="number">200</span>,<span class="comment">// 阴影的大小</span></span><br><span class="line">        shadowOffsetX: <span class="number">0</span>,<span class="comment">// 阴影水平方向上的偏移</span></span><br><span class="line">        shadowOffsetY: <span class="number">0</span>,<span class="comment">// 阴影垂直方向上的偏移</span></span><br><span class="line">        shadowColor: <span class="string">'rgba(0, 0, 0, 0.5)'</span> <span class="comment">// 阴影颜色</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在鼠标悬浮到图形元素上时，一般会出现高亮的样式。默认情况下，高亮的样式是根据普通样式自动生成的。但是高亮的样式也可以自己定义，主要是通过 emphasis 属性来定制。emphsis 中的结构，和普通样式的结构相同,例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">    series: &#123;</span><br><span class="line">        type: <span class="string">'scatter'</span>,</span><br><span class="line">        <span class="comment">// 普通样式。</span></span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">            <span class="comment">// 点的颜色。</span></span><br><span class="line">            color: <span class="string">'red'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        label: &#123;</span><br><span class="line">            show: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 标签的文字。</span></span><br><span class="line">            formatter: <span class="string">'This is a normal label.'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 高亮样式。</span></span><br><span class="line">        emphasis: &#123;</span><br><span class="line">            itemStyle: &#123;</span><br><span class="line">                <span class="comment">// 高亮时点的颜色。</span></span><br><span class="line">                color: <span class="string">'blue'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            label: &#123;</span><br><span class="line">                show: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// 高亮时标签的文字。</span></span><br><span class="line">                formatter: <span class="string">'This is a emphasis label.'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深色背景和浅色标签"><a href="#深色背景和浅色标签" class="headerlink" title="深色背景和浅色标签"></a>深色背景和浅色标签</h3><p>如果我们需要把整个主题改成深色主题，这就需要改背景色和文本颜色。</p><p>背景色是全局的，所以直接在 <code>option</code>下设置 <span style="color: #337ab7;">backgroudColor</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setOption(&#123;</span><br><span class="line">    backgroundColor: <span class="string">'#2c343c'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>文本的样式可以设置全局的 <span style="color: #337ab7;">textStyle</span>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setOption(&#123;</span><br><span class="line">    textStyle: &#123;</span><br><span class="line">        color: <span class="string">'rgba(255, 255, 255, 0.3)'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>也可以每个系列分别设置，每个系列的文本样式设置在 <span style="color: #337ab7;">label.textStyle</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">label: &#123;</span><br><span class="line">    textStyle: &#123;</span><br><span class="line">        color: <span class="string">'rgba(255, 255, 255, 0.3)'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>饼图的话还要将标签的视觉引导线的颜色设为浅色<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">labelLine: &#123;</span><br><span class="line">    lineStyle: &#123;</span><br><span class="line">        color: &apos;rgba(255, 255, 255, 0.3)&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/liumengjie2148.github.io/2018/07/13/echarts使用笔记/images/themeSet.png" width="300" title="南丁格尔图"></p><h3 id="调色盘"><a href="#调色盘" class="headerlink" title="调色盘"></a>调色盘</h3><p>调色盘，可以在 option 中设置。它给定了一组颜色，图形、系列会自动从其中选择颜色。 可以设置全局的调色盘，也可以设置系列自己专属的调色盘。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">    <span class="comment">// 全局调色盘。</span></span><br><span class="line">    color: [<span class="string">'#c23531'</span>,<span class="string">'#2f4554'</span>, <span class="string">'#61a0a8'</span>, <span class="string">'#d48265'</span>, <span class="string">'#91c7ae'</span>,<span class="string">'#749f83'</span>,  <span class="string">'#ca8622'</span>, <span class="string">'#bda29a'</span>,<span class="string">'#6e7074'</span>, <span class="string">'#546570'</span>, <span class="string">'#c4ccd3'</span>],</span><br><span class="line"></span><br><span class="line">    series: [&#123;</span><br><span class="line">        type: <span class="string">'bar'</span>,</span><br><span class="line">        <span class="comment">// 此系列自己的调色盘。</span></span><br><span class="line">        color: [<span class="string">'#dd6b66'</span>,<span class="string">'#759aa0'</span>,<span class="string">'#e69d87'</span>,<span class="string">'#8dc1a9'</span>,<span class="string">'#ea7e53'</span>,<span class="string">'#eedd78'</span>,<span class="string">'#73a373'</span>,<span class="string">'#73b9bc'</span>,<span class="string">'#7289ab'</span>, <span class="string">'#91ca8c'</span>,<span class="string">'#f49f42'</span>],</span><br><span class="line">        ...</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        type: <span class="string">'pie'</span>,</span><br><span class="line">        <span class="comment">// 此系列自己的调色盘。</span></span><br><span class="line">        color: [<span class="string">'#37A2DA'</span>, <span class="string">'#32C5E9'</span>, <span class="string">'#67E0E3'</span>, <span class="string">'#9FE6B8'</span>, <span class="string">'#FFDB5C'</span>,<span class="string">'#ff9f7f'</span>, <span class="string">'#fb7293'</span>, <span class="string">'#E062AE'</span>, <span class="string">'#E690D1'</span>, <span class="string">'#e7bcf3'</span>, <span class="string">'#9d96f5'</span>, <span class="string">'#8378EA'</span>, <span class="string">'#96BFFF'</span>],</span><br><span class="line">        ...</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ECharts-中的样式设置注意点"><a href="#ECharts-中的样式设置注意点" class="headerlink" title="ECharts 中的样式设置注意点"></a><p style="color: red">ECharts 中的样式设置注意点</p></h3><p>在 ECharts4 以前，高亮和普通样式的写法，是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">    series: &#123;</span><br><span class="line">        type: <span class="string">'scatter'</span>,</span><br><span class="line">        itemStyle: &#123;</span><br><span class="line">            <span class="comment">// 普通样式。</span></span><br><span class="line">            normal: &#123;</span><br><span class="line">                <span class="comment">// 点的颜色。</span></span><br><span class="line">                color: <span class="string">'red'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 高亮样式。</span></span><br><span class="line">            emphasis: &#123;</span><br><span class="line">                <span class="comment">// 高亮时点的颜色。</span></span><br><span class="line">                color: <span class="string">'blue'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        label: &#123;</span><br><span class="line">            <span class="comment">// 普通样式。</span></span><br><span class="line">            normal: &#123;</span><br><span class="line">                show: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// 标签的文字。</span></span><br><span class="line">                formatter: <span class="string">'This is a normal label.'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 高亮样式。</span></span><br><span class="line">            emphasis: &#123;</span><br><span class="line">                show: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// 高亮时标签的文字。</span></span><br><span class="line">                formatter: <span class="string">'This is a emphasis label.'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法 仍然被兼容，但是，不再推荐。事实上，多数情况下，使用者只会配置普通状态下的样式，而使用默认的高亮样式。所以在 ECharts4 中，支持不写 normal 的配置方法（即本文开头的那种写法），使得配置项更扁平简单。</p><h2 id="三、用到的ECharts的API"><a href="#三、用到的ECharts的API" class="headerlink" title="三、用到的ECharts的API"></a>三、用到的ECharts的API</h2><h3 id="echarts"><a href="#echarts" class="headerlink" title="echarts"></a>echarts</h3><p>  全局 echarts 对象，在 script 标签引入 echarts.js 文件后获得，或者在 AMD 环境中通过 require(‘echarts’) 获得</p><p>1、 echarts.init()</p><p>创建一个 ECharts 实例，返回 echartsInstance, 不能在单个容器上初始化多个 ECharts 实例。</p><p><strong>参数</strong></p><ul><li><p>dom</p><p>实例容器，一般是一个具有高宽的div元素。</p><p>注：如果div是隐藏的，ECharts 可能会获取不到div的高宽导致初始化失败，这时候可以明确指定div的style.width和style.height，或者在div显示后手动调用 echartsInstance.resize 调整尺寸。</p></li></ul><p>ECharts 3 中支持直接使用canvas元素作为容器，这样绘制完图表可以直接将 canvas 作为图片应用到其它地方，例如在 WebGL 中作为贴图，这跟使用 echartsInstance.getDataURL 生成图片链接相比可以支持图表的实时刷新。</p><ul><li><p>theme</p><p>应用的主题。可以是一个主题的配置对象，也可以是使用已经通过 echarts.registerTheme 注册的主题名称。</p></li><li><p>opts</p><p>附加参数。有下面几个可选项：</p><ul><li><p>devicePixelRatio</p><p>设备像素比，默认取浏览器的值window.devicePixelRatio。</p></li><li><p>renderer</p><p>渲染器，支持 ‘canvas’ 或者 ‘svg’。参见 使用 <a href="http://echarts.baidu.com/tutorial.html#%E4%BD%BF%E7%94%A8%20Canvas%20%E6%88%96%E8%80%85%20SVG%20%E6%B8%B2%E6%9F%93" target="_blank" rel="noopener"> Canvas 或者 SVG 渲染 </a>。</p></li><li><p>width</p><p>可显式指定实例宽度，单位为像素。如果传入值为 null/undefined/‘auto’，则表示自动取 dom（实例容器）的宽度。</p></li><li><p>height</p><p>可显式指定实例高度，单位为像素。如果传入值为 null/undefined/‘auto’，则表示自动取 dom（实例容器）的高度。</p></li></ul></li></ul><h3 id="echartsInstance"><a href="#echartsInstance" class="headerlink" title="echartsInstance"></a>echartsInstance</h3><pre><code>通过 echarts.init 创建的实例。</code></pre><p> 2、 echartsInstance.setOption()</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(option: Object, notMerge?: boolean, lazyUpdate?: boolean)</span><br><span class="line">or</span><br><span class="line">(option: Object, opts?: Object)</span><br></pre></td></tr></table></figure><p>设置图表实例的配置项以及数据，万能接口，所有参数和数据的修改都可以通过setOption完成，ECharts 会合并新的参数和数据，然后刷新图表。</p><p><strong>注：</strong> ECharts 2.x 中的通过 addData , setSeries 方法设置配置项的方式将不再支持，在 ECharts 3 中统一使用setOption</p><p><strong> 调用方式：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chart.setOption(option, notMerge, lazyUpdate);</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chart.setOption(option, &#123;</span><br><span class="line">    notMerge: ...,</span><br><span class="line">    lazyUpdate: ...,</span><br><span class="line">    silent: ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong>参数：</strong></p><ul><li><p>option</p><p>图表的配置项和数据，具体见<a href="http://echarts.baidu.com/option.html#title" target="_blank">配置项手册</a>。</p></li><li><p>notMerge</p><p>可选，是否不跟之前设置的option进行合并，默认为false，即合并。</p></li><li><p>lazyUpdate</p><p>可选，在设置完option后是否不立即更新图表，默认为false，即立即更新。</p></li><li><p>silent</p><p>可选，阻止调用 setOption 时抛出事件，默认为false，即抛出事件。</p></li></ul><p>3、echartsInstance.clear()</p><p> 清空当前实例，会移除实例中所有的组件和图表。清空后调用 getOption 方法返回一个{}空对象。</p><p> 有时候图表会放在多个标签页里，多个图表共用一个容器，切换标签时，多个图表的配置项会合并出现在一起，如下图：</p><p> <img src="/liumengjie2148.github.io/2018/07/13/echarts使用笔记/images/tab-chart-err1.png" width="500" title=""><br> <img src="/liumengjie2148.github.io/2018/07/13/echarts使用笔记/images/tab-chart-err2.png" width="500" title=""></p><p> 标签页下应该呈现的正确的图表效果：</p><p> <img src="/liumengjie2148.github.io/2018/07/13/echarts使用笔记/images/tab-chart1.png" width="500" title=""><br> <img src="/liumengjie2148.github.io/2018/07/13/echarts使用笔记/images/tab-chart2.png" width="500" title=""></p><p>对比就可以看出，标签页1切换到标签页2，图表1的数据以及线图的颜色的配置项被合并到图表2的配置项中；<br>而切换到标签页2后再切回标签页1，图表2的配置项又被合并到图表1中，所以图表1的纵坐标数据出现了”%”。</p><p><b style="color: #67c23a;">该问题的解决方案有两种：</b></p><p>  (1) 设置图表实例的配置项以及数据时，将参数 <span style="background-color:#f9f2f4">notMerge</span>的值设置为: true;<br>   notMerge : 是否不跟之前设置的option进行合并，默认为false，即合并, 设置为true，即不合并。</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> queUse = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'queUse'</span>))</span><br><span class="line"><span class="comment">// 绘制图表</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.queCountTypeIndex === <span class="number">0</span>) &#123;</span><br><span class="line">    queUse.setOption(<span class="keyword">this</span>.opt1, &#123;<span class="attr">notMerge</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">    or</span><br><span class="line">    queUse.setOption(<span class="keyword">this</span>.opt1, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.queCountTypeIndex === <span class="number">1</span>) &#123;</span><br><span class="line">    queUse.setOption(<span class="keyword">this</span>.opt2, &#123;<span class="attr">notMerge</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, () =&gt; &#123;</span><br><span class="line">    queUse.resize()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>  (2) 就是使用clear方法，每次切换标签页时先清空当前实例，再对该实例设置配置项以及数据。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> queUse = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'queUse'</span>))</span><br><span class="line"><span class="comment">// 绘制图表</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.queCountTypeIndex === <span class="number">0</span>) &#123;</span><br><span class="line">    queUse.clear()</span><br><span class="line">    queUse.setOption(<span class="keyword">this</span>.opt1)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.queCountTypeIndex === <span class="number">1</span>) &#123;</span><br><span class="line">    queUse.clear()</span><br><span class="line">    queUse.setOption(<span class="keyword">this</span>.opt2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, () =&gt; &#123;</span><br><span class="line">    queUse.resize()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>4、 echartsInstance.resize()</p><p>改变图表尺寸，在容器大小发生改变时需要手动调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(opts?: &#123;</span><br><span class="line">    width?: number|string,</span><br><span class="line">    height?: number|string,</span><br><span class="line">    silent?: boolean</span><br><span class="line">&#125;) =&gt; ECharts</span><br></pre></td></tr></table></figure><p><strong>参数</strong></p><ul><li><p>opts</p><p>opts 可缺省。有下面几个可选项：</p></li><li><p>width</p><p>可显式指定实例宽度，单位为像素。如果传入值为 null/undefined/‘auto’，则表示自动取 dom（实例容器）的宽度。</p></li><li><p>height</p><p>可显式指定实例高度，单位为像素。如果传入值为 null/undefined/‘auto’，则表示自动取 dom（实例容器）的高度。</p></li><li><p>silent</p><p>是否禁止抛出事件。默认为 false。</p></li></ul><p><strong>Tip:</strong> 有时候图表会放在多个标签页里，那些初始隐藏的标签在初始化图表的时候因为获取不到容器的实际高宽，可能会绘制失败，因此在切换到该标签页时需要手动调用 resize 方法获取正确的高宽并且刷新画布，或者在 opts 中显示指定图表高宽。</p><p style="color:red;">在vue组件中调用echartsInstance.resize()时，为了确保获取到容器的实际高宽，可以在 this.$nextTick()的回调函数中使用 resize 方法.</p><h3 id="events"><a href="#events" class="headerlink" title="events"></a>events</h3><p>在 ECharts 中主要通过 on 方法添加事件处理函数。</p><p>在 ECharts 中事件分为两种类型，一种是用户鼠标操作点击，或者 hover 图表的图形时触发的事件，还有一种是用户在使用可以交互的组件后触发的行为事件，例如在切换图例开关时触发的 ‘legendselectchanged’ 事件（这里需要注意切换图例开关是不会触发’legendselected’事件的），数据区域缩放时触发的 ‘datazoom’ 事件等等。</p><p>鼠标事件包括’click’，’dblclick’，’mousedown’，’mouseup’，’mouseover’，’mouseout’，’globalout’，’contextmenu’。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用指定的配置项和数据显示图表。</span></span><br><span class="line">myChart.setOption(option);</span><br><span class="line"><span class="comment">// 处理点击事件并且跳转到相应的百度搜索页面</span></span><br><span class="line">myChart.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.open(<span class="string">'https://www.baidu.com/s?wd='</span> + <span class="built_in">encodeURIComponent</span>(params.name));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>所有的鼠标事件包含参数 params，这是一个包含点击图形的数据信息的对象，如下格式：</p><p><code>{<br>    // 当前点击的图形元素所属的组件名称，<br>    // 其值如 ‘series’、’markLine’、’markPoint’、’timeLine’ 等。<br>    componentType: string,<br>    // 系列类型。值可能为：’line’、’bar’、’pie’ 等。当 componentType 为 ‘series’ 时有意义。<br>    seriesType: string,<br>    // 系列在传入的 option.series 中的 index。当 componentType 为 ‘series’ 时有意义。<br>    seriesIndex: number,<br>    // 系列名称。当 componentType 为 ‘series’ 时有意义。<br>    seriesName: string,<br>    // 数据名，类目名<br>    name: string,<br>    // 数据在传入的 data 数组中的 index<br>    dataIndex: number,<br>    // 传入的原始数据项<br>    data: Object,<br>    // sankey、graph 等图表同时含有 nodeData 和 edgeData 两种 data，<br>    // dataType 的值会是 ‘node’ 或者 ‘edge’，表示当前点击在 node 还是 edge 上。<br>    // 其他大部分图表中只有一种 data，dataType 无意义。<br>    dataType: string,<br>    // 传入的数据值<br>    value: number|Array<br>    // 数据图形的颜色。当 componentType 为 ‘series’ 时有意义。<br>    color: string<br>}</code></p><p><strong> 如何区分鼠标点击到了哪里：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">myChart.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (params.componentType === <span class="string">'markPoint'</span>) &#123;</span><br><span class="line">        <span class="comment">// 点击到了 markPoint 上</span></span><br><span class="line">        <span class="keyword">if</span> (params.seriesIndex === <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="comment">// 点击到了 index 为 5 的 series 的 markPoint 上。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (params.componentType === <span class="string">'series'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (params.seriesType === <span class="string">'graph'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (params.dataType === <span class="string">'edge'</span>) &#123;</span><br><span class="line">                <span class="comment">// 点击到了 graph 的 edge（边）上。</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 点击到了 graph 的 node（节点）上。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>javascript执行机制</title>
      <link href="/liumengjie2148.github.io/2018/07/09/javascript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
      <url>/liumengjie2148.github.io/2018/07/09/javascript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>   <img src="/liumengjie2148.github.io/2018/07/09/javascript执行机制/images/gaiLan.png" alt="概览"></p><p> js引擎是单线程的，如上图中，他负责维护任务队列，并通过Event Loop的机制按顺序把任务放入栈中执行。而图中的异步处理模块就是runtime提供的，<br> 拥有和js引擎互不干扰的线程。</p><ul><li>引擎： 解释并编译代码，让它变成能交给机器运行的代码。</li><li>runtime： 就是运行环境，它提供一些对外接口供js调用以跟外界打交道，比如，浏览器环境、Node.js环境。不同的runtime会停供不同的接口，比如，在Node.js环境中，我们可以通过<code>require</code>来引入模块，而在浏览器中，我们有<code>window</code>、DOM。</li></ul><p>接下来介绍图中的： 栈和任务队列</p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p> 运行下面这段代码：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function bar() &#123;</span><br><span class="line">   console.log(1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function foo() &#123;</span><br><span class="line">  console.log(2)</span><br><span class="line">  bar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(3)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p> 它在栈中的入栈、出栈过程，如下图：</p><p>   <img src="/liumengjie2148.github.io/2018/07/09/javascript执行机制/images/articlex.png" alt="函数入栈、出栈过程图"></p><h2 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h2><p> js中有两类任务队列：宏任务队列（macro tasks）和 微任务队列（micro tasks）。宏任务队列可以有多个，微任务队列只有一个。那么什么任务会分到那个队列呢？</p><ul><li>宏任务：script（全局任务），setTimeout，setInternal，setImmediate, I/O, UI rendering.</li><li><p>微任务：process.nextTick, Promise, Object.observer, MutationObserver.</p><p>我们上面讲到，当stack空的时候，就会从任务队列中，去任务来执行。共分3步：</p></li></ul><ol><li>取一个宏任务来执行，执行完毕后，执行下一步；</li><li>取一个微任务来执行，执行完毕后，再取一个微任务来执行，直到微任务队列为空，执行下一步；</li><li><p>更新UI渲染。</p><p>Event Loop 会无限循环执行上面3步，这就是Event Loop的主要控制逻辑。其中，第3步（更新UI渲染）会根据浏览器的逻辑，决定要不要马上执行更新，毕竟更新UI成本大，所以，一般都会比较长的时间间隔执行一次更新。</p><p>从执行步骤来看，我们发现微任务受到了特殊待遇！我们代码开始执行都是从script（全局任务）开始，所以，一旦我们的全局任务（属于宏任务）执行完，就马上执行完整个微任务队列。看个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;script start&apos;);</span><br><span class="line"></span><br><span class="line">Promise.resolve().then(() =&gt; &#123;</span><br><span class="line">  console.log(&apos;p 1&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&apos;setTimeout&apos;);</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">var s = new Date();</span><br><span class="line">while(new Date() - s &lt; 50); // 阻塞50ms</span><br><span class="line"></span><br><span class="line">Promise.resolve().then(() =&gt; &#123;</span><br><span class="line"> console.log(&apos;p 2&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(&apos;script end&apos;);</span><br><span class="line"></span><br><span class="line">/*** output ***/</span><br><span class="line"></span><br><span class="line">// one macro task</span><br><span class="line">script start</span><br><span class="line">script end</span><br><span class="line"></span><br><span class="line">// all micro tasks</span><br><span class="line"></span><br><span class="line">p 1</span><br><span class="line">p 2</span><br><span class="line"></span><br><span class="line">// one macro task again</span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure></li></ol><p>上面之所以加50ms的阻塞，是因为<code>setTimeout</code>的delayTime最少是4ms，为了避免认为<code>setTimeout</code>是因为4ms的延迟而在后面才被执行的，我们加了50ms的阻塞。在微任务中，<code>process.nextTick</code>是一个特殊的任务，它会被直接插入到微任务的队首（当然了，多个<code>process.nextTick</code>之间也是先入先出的），优先级最高。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>setTimeout小记</title>
      <link href="/liumengjie2148.github.io/2018/07/04/setTimeout%E5%B0%8F%E8%AE%B0/"/>
      <url>/liumengjie2148.github.io/2018/07/04/setTimeout%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="window-setTimeout-方法"><a href="#window-setTimeout-方法" class="headerlink" title="window setTimeout() 方法"></a>window setTimeout() 方法</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3> <p>setTimeout() 方法用于在指定的毫秒数后调用函数或计算表达式。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(code, milliseconds, params1, params2, ...)</span><br><span class="line">setTimeout(function, milliseconds, params1, params2, ...)</span><br></pre></td></tr></table></figure> <p>返回值： 返回一个ID（数字），可以将这个ID传递给clearTimeout()来取消执行setTimeout()方法。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul><li><p>实例1： 用setTimeout() 方法实现 setInternal()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function()&#123;</span><br><span class="line">  console.log(&apos;hello&apos;);</span><br><span class="line">  setTimeout(function()&#123;</span><br><span class="line">     console.log(&apos;hello&apos;);</span><br><span class="line">   &#125;, 1000)</span><br><span class="line">&#125;, 1000)</span><br></pre></td></tr></table></figure></li><li><p>实例2：下面的代码执行结果是？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(var i = 0; i&lt; 5; i++) &#123;</span><br><span class="line">   setTimeout(function() &#123;</span><br><span class="line">     console.log(i);</span><br><span class="line">   &#125;, 1000)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果： 输出5次5<br>原因：setTimeout没有实现多线程，它背后的真相是这样的：</p><p>JavaScript引擎是单线程运行的,浏览器无论在什么时候都只且只有一个线程在运行JavaScript程序。<br>浏览器的内核是多线程的，它们在内核控制下相互配合以保持同步，一个浏览器至少实现三个常驻线程：JavaScript引擎线程，GUI渲染线程，浏览器事件触发线程。</p><ul><li>JavaScript引擎是基于事件驱动单线程执行的，JavaScript引擎一直等待着任务队列中任务的到来，然后加以处理，浏览器无论什么时候都只有一个JavaScript线程在运行JavaScript程序。</li><li>GUI渲染线程负责渲染浏览器界面，当界面需要重绘（Repaint）或由于某种操作引发回流(Reflow)时,该线程就会执行。但需要注意，GUI渲染线程与JavaScript引擎是互斥的，当JavaScript引擎执行时GUI线程会被挂起，GUI更新会被保存在一个队列中等到JavaScript引擎空闲时立即被执行。</li><li>事件触发线程，当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JavaScript引擎的处理。这些事件可来自JavaScript引擎当前执行的代码块如setTimeout、也可来自浏览器内核的其他线程如鼠标点击、Ajax异步请求等，但由于JavaScript的单线程关系所有这些事件都得排队等待JavaScript引擎处理（当线程中没有执行任何同步代码的前提下才会执行异步代码）。</li></ul><p>所以循环执行的时候，每次循环执行的时候，由于时间没到，所以setTimeout()方法里的函数不执行，添加到事件队列中，循环结束，i等于5，事件队列中存在5个事件函数，当时间到了的时候，会依次执行这5个函数，所以输出5次5。</p><ul><li>实例3：如何让实例2中的代码输出每次循环时的i值？</li></ul><p>第一种方法：用setTimeout()方法的第3个参数将i值传递到匿名函数中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">  setTimeout(function(count) &#123;</span><br><span class="line">    console.log(count)</span><br><span class="line">  &#125;, 1000, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方法：用ES6的let关键字定义变量i</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(let i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">  setTimeout(function() &#123;</span><br><span class="line">    console.log(i)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 解析：上面的代码中，变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，所以最后输出的是每次循环结束时的i值。你可能会问，如果每一轮循环的变量i都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为JavaScript引擎内部会记住上一轮循环的值，初始化本轮变量i时，就在上一轮循环的基础上进行计算。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/liumengjie2148.github.io/2018/07/04/hello-Hexo/"/>
      <url>/liumengjie2148.github.io/2018/07/04/hello-Hexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>hexo+github搭建个人博客并部署到GitHub上</title>
      <link href="/liumengjie2148.github.io/2018/05/11/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/liumengjie2148.github.io/2018/05/11/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="准备步骤"><a href="#准备步骤" class="headerlink" title="准备步骤"></a>准备步骤</h2><ol><li>安装Node.js和配置好Node.js环境;</li><li>安装Git和配置好Git环境;</li><li><p>Github账户注册和新建项目</p><ul><li><p>登陆github 点击这里新建一个仓储<br><img src="/liumengjie2148.github.io/2018/05/11/hexo-github搭建个人博客/images/create-repository.png" alt="新建一个仓储" title="Optional title"></p></li><li><p>按下面步骤操作，项目必须要遵守格式：账户名.github.io,并且需要勾选Initialize this repository with a README<br><img src="/liumengjie2148.github.io/2018/05/11/hexo-github搭建个人博客/images/create-steps.png" alt="操作步骤" title="Optional title"></p></li><li><p>然后这个仓储就创建好了，图中的地址一定要记好，将Hexo与Github page联系起来的时候会用到<br><img src="/liumengjie2148.github.io/2018/05/11/hexo-github搭建个人博客/images/create-finished.png" alt="创建成功" title="Optional title"></p></li></ul></li></ol><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><ol><li>输入<code>npm install hexo -g</code>，开始安装Hexo;</li><li><p>输入<code>hexo -v</code>，检查hexo是否安装成功.</p><p>[hexo常用命令笔记] (<a href="https://segmentfault.com/a/1190000002632530" target="_blank" rel="noopener">https://segmentfault.com/a/1190000002632530</a>)</p></li></ol><h2 id="初始化-hexo"><a href="#初始化-hexo" class="headerlink" title="初始化 hexo"></a>初始化 hexo</h2><ol><li>在自己认为合适的地方创个文件夹: 例如 blog，然后通过命令行 <code>cd blog</code> 进入到该文件夹里面;</li><li>输入<code>hexo init</code>，初始化该文件夹;</li><li>输入<code>npm install</code>，安装所需要的组件;</li><li>输入<code>hexo g</code>，首次体验Hexo;</li><li><p>输入<code>hexo s</code>，开启服务器，访问[该网址] (<a href="http://localhost:4000/blog.github.io/." target="_blank" rel="noopener">http://localhost:4000/blog.github.io/.</a>) ，正式体验Hexo。</p><p>问题：假如页面一直无法跳转，那么可能端口被占用了。<br>此时我们ctrl+c停止服务器，接着输入<code>hexo server -p 端口号</code> 来改变端口号</p></li></ol><h2 id="在-config-yml-进行基础配置"><a href="#在-config-yml-进行基础配置" class="headerlink" title="在 _config.yml 进行基础配置"></a>在 _config.yml 进行基础配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Hexo   // 博客名称</span><br><span class="line">subtitle:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">author: John Doe  // 作者</span><br><span class="line">language:</span><br><span class="line">timezone:</span><br><span class="line">theme:   // 主题</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://yoursite.com/blog.github.io</span><br><span class="line">root: /blog.github.io/</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><p>其中可以在 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo Themes</a> 浏览更多主题</p><p>以安装 <code>BlueLake</code> 主题为例：</p><ol><li><p>安装主题<br>在 blog 文件夹下打开cmd，输入命令：<code>git clone https://github.com/iissnan/hexo-theme-nextthemes/next（next为主题名字）</code>，来获得更多主题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake</span><br></pre></td></tr></table></figure></li><li><p>安装主题渲染器<br><code>BlueLake</code>是基于<code>jade</code>和<code>stylus</code>写的，所以需要安装<code>hexo-renderer-jade</code>和<code>hexo-renderer-stylus</code>来渲染</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-jade@0.3.0 --save</span><br><span class="line">npm install hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li><li><p>启用主题<br>打开根<code>_config.yml</code>配置文件，找到<code>theme</code>字段，将其值改为<code>BlueLake</code>(先确认主题文件夹名称是否为BlueLake)</p></li><li><p>更新主题<br>今后若主题添加了新功能正是您需要的，您可以直接git pull来更新主题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes/BlueLake</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></li></ol><h2 id="将Hexo与Github-page联系起来"><a href="#将Hexo与Github-page联系起来" class="headerlink" title="将Hexo与Github page联系起来"></a>将Hexo与Github page联系起来</h2><ol><li>设置Git的user name和email（如果是第一次的话）</li><li>输入<code>cd ~/.ssh</code>，检查是否有.ssh的文件夹;</li><li>输入ls，列出.ssh文件下的内容;</li><li>如果没有.ssh文件夹，输入<code>ssh-keygen -t rsa -C &#39;你的邮箱&#39;</code>，连续三个回车，生成密钥，<br>最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator.ssh）。</li><li>使用<code>cd id_rsa.pub</code>命令进入id_rsa.pub目录,再使用<code>more id_rsa.pub</code>命令查看密钥的内容;</li><li>登录Github，点击头像下的settings，添加ssh: 新建一个new ssh key，将id_rsa.pub文件里的内容复制上去;</li><li>输入<code>ssh -T git@github.com</code>，测试添加ssh是否成功,如果看到Hi后面是你的github用户名，就说明成功了;</li><li><p>配置Deployment，在 blog 文件夹中，找到_config.yml文件，修改repo值（在末尾）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  //github上创建好的仓储地址：格式如下 https://账户:密码@你的仓储地址，也就是上面要你记住的地址</span><br><span class="line">  repository: git@github.com:liumengjie2148/blog.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ol><h2 id="新建一篇博客以及部署到github"><a href="#新建一篇博客以及部署到github" class="headerlink" title="新建一篇博客以及部署到github"></a>新建一篇博客以及部署到github</h2><h3 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h3><p>  新建一篇博客，在cmd执行命令：<code>hexo new post &quot;博客名&quot;</code>,这时候在文件夹_posts目录下将会看到已经创建的文件</p><h3 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h3><ol><li>需要安装一个扩展：<code>npm install hexo-deployer-git --save</code>;</li><li>使用编辑器编好文章，那么就可以使用命令：<code>hexo d -g</code>，生成以及部署了<br>[markdown语法]（<a href="http://www.markdown.cn/" target="_blank" rel="noopener">http://www.markdown.cn/</a> ）</li><li>部署成功后访问你的地址：http://用户名.github.io, 那么将看到生成的文章</li></ol>]]></content>
      
      
      
    </entry>
    
  
  
</search>
